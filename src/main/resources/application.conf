app {

  # put any services that this service needs to connect too
  # ideally there shouldnt be any
  fanarLogicEndpoint = "http://localhost:8050/graphql"
  fanarLogicEndpoint = ${?LOGIC_ENDPOINT}

  requirementsEndpoint = "http://localhost:8053/graphql"
  requirementsEndpoint = ${?REQUIREMENT_ENDPOINT}

  portsEndpoint = "http://localhost:8064/graphql"
  portsEndpoint = ${?PORTS_ENDPOINT}


  # global distance cache has to be manually flushed, retains results of all distance requests
  globalDistanceCache = true

  # client auth variables
  authDomain = "maanalab.eu.auth0.com"
  authClientId = "BrwKLEpM8XA2sAbEoBreSPCEp30WAM4v"
  authClientSecret = "IHgwxAYGHAFx51be1fJmdKaRu8gJ2R0GmWjvqQwp1shUJRu1xlmgerXQbi9aTd5C"
  authIdentifier = "https://maanalab.maana.io/"

  maanaClientEndpoint = "https://aatcfanar-test02.knowledge.maana.io:8443/service/ports/graphql"

  #REACT_APP_PORTAL_AUTH_DOMAIN=maanalab.eu.auth0.com
  #REACT_APP_PORTAL_AUTH_CLIENT_ID=BrwKLEpM8XA2sAbEoBreSPCEp30WAM4v
  #REACT_APP_PORTAL_AUTH_CLIENT_SECRET=IHgwxAYGHAFx51be1fJmdKaRu8gJ2R0GmWjvqQwp1shUJRu1xlmgerXQbi9aTd5C
  #REACT_APP_PORTAL_AUTH_IDENTIFIER=https://maanalab.maana.io/


}


# connection detais if using H2 in memory database
#h2mem = {
#  url = "jdbc:h2:mem:howtographqldb"
#  driver = org.h2.Driver
#  connectionPool = disabled
#  keepAliveConnection = true
#}


akka {
  log-config-on-start = off
  loglevel = "INFO"
  http {
    server {
      log-unencrypted-network-bytes = 2048
      idle-timeout = 1200 s
      request-timeout = 600 s
      socket-options {
        so-receive-buffer-size = undefined
        so-send-buffer-size = undefined
        so-reuse-address = undefined
        so-traffic-class = undefined
        tcp-keep-alive = undefined
        tcp-oob-inline = undefined
        tcp-no-delay = undefined
      }



    },
    client {
      log-unencrypted-network-bytes = 2048

      host-connection-pool {
        # The maximum number of parallel connections that a connection pool to a
        # single host endpoint is allowed to establish. Must be greater than zero.
        max-connections = 4

        # The minimum number of parallel connections that a pool should keep alive ("hot").
        # If the number of connections is falling below the given threshold, new ones are being spawned.
        # You can use this setting to build a hot pool of "always on" connections.
        # Default is 0, meaning there might be no active connection at given moment.
        # Keep in mind that `min-connections` should be smaller than `max-connections` or equal
        min-connections = 0

        # The maximum number of times failed requests are attempted again,
        # (if the request can be safely retried) before giving up and returning an error.
        # Set to zero to completely disable request retries.
        max-retries = 5

        # The maximum number of open requests accepted into the pool across all
        # materializations of any of its client flows.
        # Protects against (accidentally) overloading a single pool with too many client flow materializations.
        # Note that with N concurrent materializations the max number of open request in the pool
        # will never exceed N * max-connections * pipelining-limit.
        # Must be a power of 2 and > 0!
        max-open-requests = 32
      }
    }
  }
}